////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
/*
I: 3 numbers, start of range, end, and increment/ decrementor - which is optional
O: The range as an array
C: N/A
E: If there is no increase/ decreaser go by 1
*/
function range(start, end, step, output = []) {
  // if start = end or step is negative, return empty array
  if (start === end || step < 0){
    return output;
  };
  // if step is undefined, step = 1
  if (step === undefined){
    step = 1;
  };
  // if positive direction
  if (start < end){
    // for loop incrementing
    for (let i = start; i <= end; i += step){
      output.push(i);
    }
  }; 
  //  if negative direction
  if (start > end){
    // for loop for decrementing
    for (let i = start; i >= end; i -= step){
      output.push(i);
    }
  };
  return output;
};


////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum(array) {
  // reduce method on array
  return array.reduce((acc, current) => {
    // add each number
    acc += current;
    return acc;
  }, 0);
};


////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
/*
I: An array
O: A new array - reversed
*/
function reverseArray(array, output = []) {
  // for loop going backwards - push to output
  for (let i = array.length - 1; i >= 0; i--){
    output.push(array[i]);
  }
  return output;
};


////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
/*
I: An array
O: The original array - reversed
*/
function reverseArrayInPlace(array) {
  // array sort method: b - a to go in descending order
  return array.sort((a, b) => b - a);
};


////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// video available
// a list is an object structured as a series of nodes (nested objects)

function arrayToList(array) {
  //create function scoped variable null
  let rest = null;
  // iterate backwards
  for (let i = array.length - 1; i >= 0; i--){
    // reassign rest to value: thing in array and then rest is a nest
    rest = {value: array [i], rest: rest};
  }
  // return rest - reassigned
  return rest;
};


////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// video available

function listToArray() {

}

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend() {

}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth() {

}

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// video available

function deepEqual() {

}

////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};